-- === Таблица лидов (заявки с формы) ===
create table if not exists leads (
  id bigint generated by default as identity primary key,
  name text not null,
  phone text not null,
  email text not null,
  model text,
  message text,
  created_at timestamptz default now()
);

alter table leads enable row level security;

-- читать могут только админы
drop policy if exists "admins read leads" on leads;
create policy "admins read leads" on leads
for select using (is_admin());

-- создавать может любой (публичная форма)
drop policy if exists "anyone insert leads" on leads;
create policy "anyone insert leads" on leads
for insert with check (true);

-- === Категории загрузок ===
create table if not exists download_categories (
  id bigint generated by default as identity primary key,
  slug text unique not null,
  title text not null
);

-- === Файлы для загрузки ===
create table if not exists downloads (
  id bigint generated by default as identity primary key,
  slug text unique not null,
  title text not null,
  description text,
  category_id bigint references download_categories(id) on delete set null,
  file_url text not null,
  tags text[] default '{}',
  is_published boolean default true,
  published_at timestamptz default now(),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create or replace function downloads_set_updated_at() returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  new.updated_at = now();
  return new;
end; $$;

drop trigger if exists trg_downloads_updated on downloads;
create trigger trg_downloads_updated before update on downloads
for each row execute function downloads_set_updated_at();

alter table download_categories enable row level security;
alter table downloads enable row level security;

-- публичное чтение категорий
drop policy if exists "read download_categories" on download_categories;
create policy "read download_categories" on download_categories
for select using (true);

-- публичное чтение только опубликованных
drop policy if exists "read published downloads" on downloads;
create policy "read published downloads" on downloads
for select using (is_published = true);

-- запись только админам
drop policy if exists "admins manage download_categories" on download_categories;
create policy "admins manage download_categories" on download_categories
for all using (is_admin()) with check (is_admin());

drop policy if exists "admins manage downloads" on downloads;
create policy "admins manage downloads" on downloads
for all using (is_admin()) with check (is_admin());
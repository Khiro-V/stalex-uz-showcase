-- === Таблица новостей ===
create table if not exists public.news_posts (
  id          bigint generated by default as identity primary key,
  slug        text unique not null,
  title       text not null,
  excerpt     text,
  content_md  text,
  cover_url   text,
  tags        text[] default '{}',
  is_published boolean default true,
  published_at timestamptz default now(),
  author_email text default auth.email(),
  created_at  timestamptz default now(),
  updated_at  timestamptz default now()
);

create index if not exists news_published_idx on public.news_posts (is_published);
create index if not exists news_published_at_idx on public.news_posts (published_at desc);

create or replace function public.news_set_updated_at() 
returns trigger 
security definer
set search_path = public
as $$
begin
  new.updated_at = now();
  return new;
end; 
$$ language plpgsql;

drop trigger if exists trg_news_updated on public.news_posts;
create trigger trg_news_updated before update on public.news_posts
for each row execute function public.news_set_updated_at();

-- === RLS ===
alter table public.news_posts enable row level security;

-- чтение всем только опубликованных
drop policy if exists "read published news" on public.news_posts;
create policy "read published news" on public.news_posts
for select using (is_published = true);

-- админы могут всё (используем уже существующую is_admin())
drop policy if exists "admins manage news" on public.news_posts;
create policy "admins manage news" on public.news_posts
for all using (is_admin()) with check (is_admin());

-- === Storage bucket для обложек ===
insert into storage.buckets (id, name, public) 
values ('news', 'news', true)
on conflict (id) do nothing;